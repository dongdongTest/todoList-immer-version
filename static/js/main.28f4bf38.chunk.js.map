{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","handleChange","useCallback","e","target","handleSubmit","preventDefault","onSubmit","placeholder","onChange","TodoList","todos","onDelete","onToggle","todoList","map","todo","index","checked","text","key","cn","onClick","App","setTodos","handleInsert","produce","draft","push","handleDelete","idx","splice","handleToggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wTAYeA,G,MATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,aAAf,6BACA,yBAAKA,UAAU,WAAWD,M,OCqBjBE,G,MAxBI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAERC,mBAAS,IAFD,mBAE5BC,EAF4B,KAEpBC,EAFoB,KAI7BC,EAAeC,uBAAY,SAACC,GAChCH,EAASG,EAAEC,OAAOL,SAClB,IAEIM,EAAeH,uBAAY,SAACC,GAChCA,EAAEG,iBACFT,EAASE,GACTC,EAAS,MACT,CAACD,EAAQF,IAEX,OACE,0BAAMF,UAAU,aAAaY,SAAUF,GACrC,2BAAOG,YAAY,yCAAWT,MAAOA,EAAOU,SAAUR,IACtD,gCACE,kBAAC,IAAD,U,wBCMOS,EAvBE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAQC,EAA0B,EAA1BA,SAAWC,EAAe,EAAfA,SAE/BC,EAAWH,EAAMI,KAAI,SAACC,EAAKC,GAAW,IACjCC,EAAiBF,EAAjBE,QAASC,EAAQH,EAARG,KAChB,OACA,yBAAKxB,UAAU,WAAWyB,IAAKH,GAC7B,yBAAKtB,UAAW0B,IAAG,WAAY,CAACH,YAAWI,QAAS,kBAAMT,EAASI,KAChEC,EAAU,kBAAC,IAAD,MAAgB,kBAAC,IAAD,MAC3B,yBAAKvB,UAAU,QAAQwB,IAEzB,yBAAKxB,UAAU,SAAS2B,QAAS,kBAAMV,EAASK,KAC9C,kBAAC,IAAD,WAKR,OACE,oCACGH,I,OC8BQS,EA/CH,WAAO,IAAD,EAEWzB,mBAAS,CAClC,CACEqB,KAAO,QACPD,SAAW,GAEb,CACEC,KAAO,KACPD,SAAW,GAEb,CACEC,KAAO,SACPD,SAAW,KAbC,mBAETP,EAFS,KAEDa,EAFC,KAiBVC,EAAevB,uBAAY,SAACiB,GAChC,IAAMH,EAAO,CACXG,KAAOA,EACPD,SAAU,GAEZM,EAASE,YAAQf,GAAQ,SAAAgB,GACvBA,EAAMC,KAAKZ,SAEb,CAACL,IAEGkB,EAAe3B,uBAAY,SAAC4B,GAChCN,EAASE,YAAQf,GAAQ,SAAAgB,GACvBA,EAAMI,OAAOD,EAAI,SAEnB,CAACnB,IAEGqB,EAAe9B,uBAAY,SAAC4B,GAChCN,EAASb,EAAMI,KAAI,SAACC,EAAKC,GAAN,OAAgBA,IAAUa,EAAV,eAAoBd,EAApB,CAA2BE,SAAUF,EAAKE,UAAWF,QACxF,CAACL,IAEH,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYd,SAAU4B,IACtB,kBAAC,EAAD,CAAUd,MAAOA,EAAOC,SAAUiB,EAAchB,SAAUmB,OCnC9CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.28f4bf38.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoTemplate.scss';\n\nconst TodoTemplate = ({ children }) => {\n  return (\n    <div className='TodoTemplate'>\n      <div className='app-title'>일정 관리</div>\n      <div className='content'>{children}</div>\n    </div>\n  );\n};\n\nexport default TodoTemplate;","import React, {useCallback, useState} from 'react';\nimport {MdAdd} from \"react-icons/md\";\nimport './TodoInsert.scss';\n\nconst TodoInsert = ({ onInsert }) => {\n\n  const [value , setValue] = useState('');\n\n  const handleChange = useCallback((e) => {\n    setValue(e.target.value)\n  },[]);\n\n  const handleSubmit = useCallback((e) => {\n    e.preventDefault();\n    onInsert(value);\n    setValue('')\n  },[value , onInsert]);\n\n  return (\n    <form className='TodoInsert' onSubmit={handleSubmit}>\n      <input placeholder='할일 목록 입력' value={value} onChange={handleChange}/>\n      <button>\n        <MdAdd />\n      </button>\n    </form>\n  );\n};\n\nexport default TodoInsert;","import React from 'react';\nimport {MdCheckBox, MdCheckBoxOutlineBlank, MdRemoveCircleOutline} from \"react-icons/md\";\nimport './TodoList.scss';\nimport cn from 'classnames';\n\nconst TodoList = ({ todos , onDelete , onToggle }) => {\n\n  const todoList = todos.map((todo,index) => {\n      const {checked, text} = todo;\n      return (\n      <div className='TodoList' key={index}>\n        <div className={cn('checkbox', {checked})} onClick={() => onToggle(index)}>\n          {checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/>}\n          <div className='text'>{text}</div>\n        </div>\n        <div className='remove' onClick={() => onDelete(index)}>\n          <MdRemoveCircleOutline/>\n        </div>\n      </div>\n      )});\n\n  return (\n    <>\n      {todoList}\n    </>\n  );\n};\n\nexport default TodoList;","import React, {useCallback, useState} from 'react';\nimport TodoTemplate from \"./components/TodoTemplate\";\nimport TodoInsert from \"./components/TodoInsert\";\nimport TodoList from \"./components/TodoList\";\nimport produce from \"immer\";\n\nconst App = () => {\n\n  const [todos , setTodos] = useState([\n    {\n      text : 'react',\n      checked  : true,\n    },\n    {\n      text : 'JS',\n      checked  : true,\n    },\n    {\n      text : 'Python',\n      checked  : false,\n    },\n  ]);\n\n  const handleInsert = useCallback((text) => {\n    const todo = {\n      text : text ,\n      checked : false\n    };\n    setTodos(produce(todos , draft => {\n      draft.push(todo)\n    }));\n  },[todos]);\n\n  const handleDelete = useCallback((idx) => {\n    setTodos(produce(todos , draft => {\n      draft.splice(idx,1)\n    }));\n  },[todos]);\n\n  const handleToggle = useCallback((idx) => {\n    setTodos(todos.map((todo,index) => index === idx ? {...todo , checked: !todo.checked} : todo))\n  },[todos]);\n\n  return (\n    <div>\n      <TodoTemplate>\n        <TodoInsert onInsert={handleInsert}/>\n        <TodoList todos={todos} onDelete={handleDelete} onToggle={handleToggle}/>\n      </TodoTemplate>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}