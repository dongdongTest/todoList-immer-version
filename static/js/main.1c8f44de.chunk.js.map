{"version":3,"sources":["components/TodoTemplate.js","components/TodoInsert.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplate","children","className","TodoInsert","onInsert","useState","value","setValue","handleChange","useCallback","e","target","handleSubmit","preventDefault","onSubmit","placeholder","onChange","TodoList","todos","onDelete","onToggle","todoList","map","todo","index","checked","text","key","cn","onClick","App","setTodos","handleInsert","produce","draft","push","handleDelete","idx","splice","handleToggle","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAYeA,G,MATM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,aAAf,6BACA,yBAAKA,UAAU,WAAWD,M,OCqBjBE,G,MAxBI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EAERC,mBAAS,IAFD,mBAE5BC,EAF4B,KAEpBC,EAFoB,KAI7BC,EAAeC,uBAAY,SAACC,GAChCH,EAASG,EAAEC,OAAOL,SAClB,IAEIM,EAAeH,uBAAY,SAACC,GAChCA,EAAEG,iBACFT,EAASE,GACTC,EAAS,MACT,CAACD,EAAQF,IAEX,OACE,0BAAMF,UAAU,aAAaY,SAAUF,GACrC,2BAAOG,YAAY,yCAAWT,MAAOA,EAAOU,SAAUR,IACtD,gCACE,kBAAC,IAAD,U,wBCMOS,EAvBE,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAQC,EAA0B,EAA1BA,SAAWC,EAAe,EAAfA,SAE/BC,EAAWH,EAAMI,KAAI,SAACC,EAAKC,GAAW,IACjCC,EAAiBF,EAAjBE,QAASC,EAAQH,EAARG,KAChB,OACA,yBAAKxB,UAAU,WAAWyB,IAAKH,GAC7B,yBAAKtB,UAAW0B,IAAG,WAAY,CAACH,YAAWI,QAAS,kBAAMT,EAASI,KAChEC,EAAU,kBAAC,IAAD,MAAgB,kBAAC,IAAD,MAC3B,yBAAKvB,UAAU,QAAQwB,IAEzB,yBAAKxB,UAAU,SAAS2B,QAAS,kBAAMV,EAASK,KAC9C,kBAAC,IAAD,WAKR,OACE,oCACGH,I,OC+BQS,EAhDH,WAAO,IAAD,EAEWzB,mBAAS,CAClC,CACEqB,KAAO,QACPD,SAAW,GAEb,CACEC,KAAO,KACPD,SAAW,GAEb,CACEC,KAAO,SACPD,SAAW,KAbC,mBAETP,EAFS,KAEDa,EAFC,KAiBVC,EAAevB,uBAAY,SAACiB,GAChC,IAAMH,EAAO,CACXG,KAAOA,EACPD,SAAU,GAEZM,EAASE,YAAQf,GAAQ,SAAAgB,GACvBA,EAAMC,KAAKZ,SAEb,CAACL,IAEGkB,EAAe3B,uBAAY,SAAC4B,GAChCN,EAASE,YAAQf,GAAQ,SAAAgB,GACvBA,EAAMI,OAAOD,EAAI,SAEnB,CAACnB,IAEGqB,EAAe9B,uBAAY,SAAC4B,GAChCN,EAASE,YAAQf,GAAQ,SAAAgB,GACvBA,EAAMG,GAAKZ,SAAWS,EAAMG,GAAKZ,cAC9B,CAACP,IAER,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAYd,SAAU4B,IACtB,kBAAC,EAAD,CAAUd,MAAOA,EAAOC,SAAUiB,EAAchB,SAAUmB,OCpC9CC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1c8f44de.chunk.js","sourcesContent":["import React from 'react';\r\nimport './TodoTemplate.scss';\r\n\r\nconst TodoTemplate = ({ children }) => {\r\n  return (\r\n    <div className='TodoTemplate'>\r\n      <div className='app-title'>일정 관리</div>\r\n      <div className='content'>{children}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoTemplate;","import React, {useCallback, useState} from 'react';\r\nimport {MdAdd} from \"react-icons/md\";\r\nimport './TodoInsert.scss';\r\n\r\nconst TodoInsert = ({ onInsert }) => {\r\n\r\n  const [value , setValue] = useState('');\r\n\r\n  const handleChange = useCallback((e) => {\r\n    setValue(e.target.value)\r\n  },[]);\r\n\r\n  const handleSubmit = useCallback((e) => {\r\n    e.preventDefault();\r\n    onInsert(value);\r\n    setValue('')\r\n  },[value , onInsert]);\r\n\r\n  return (\r\n    <form className='TodoInsert' onSubmit={handleSubmit}>\r\n      <input placeholder='할일 목록 입력' value={value} onChange={handleChange}/>\r\n      <button>\r\n        <MdAdd />\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoInsert;","import React from 'react';\r\nimport {MdCheckBox, MdCheckBoxOutlineBlank, MdRemoveCircleOutline} from \"react-icons/md\";\r\nimport './TodoList.scss';\r\nimport cn from 'classnames';\r\n\r\nconst TodoList = ({ todos , onDelete , onToggle }) => {\r\n\r\n  const todoList = todos.map((todo,index) => {\r\n      const {checked, text} = todo;\r\n      return (\r\n      <div className='TodoList' key={index}>\r\n        <div className={cn('checkbox', {checked})} onClick={() => onToggle(index)}>\r\n          {checked ? <MdCheckBox/> : <MdCheckBoxOutlineBlank/>}\r\n          <div className='text'>{text}</div>\r\n        </div>\r\n        <div className='remove' onClick={() => onDelete(index)}>\r\n          <MdRemoveCircleOutline/>\r\n        </div>\r\n      </div>\r\n      )});\r\n\r\n  return (\r\n    <>\r\n      {todoList}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoList;","import React, {useCallback, useState} from 'react';\r\nimport TodoTemplate from \"./components/TodoTemplate\";\r\nimport TodoInsert from \"./components/TodoInsert\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport produce from \"immer\";\r\n\r\nconst App = () => {\r\n\r\n  const [todos , setTodos] = useState([\r\n    {\r\n      text : 'react',\r\n      checked  : true,\r\n    },\r\n    {\r\n      text : 'JS',\r\n      checked  : true,\r\n    },\r\n    {\r\n      text : 'Python',\r\n      checked  : false,\r\n    },\r\n  ]);\r\n\r\n  const handleInsert = useCallback((text) => {\r\n    const todo = {\r\n      text : text ,\r\n      checked : false\r\n    };\r\n    setTodos(produce(todos , draft => {\r\n      draft.push(todo)\r\n    }));\r\n  },[todos]);\r\n\r\n  const handleDelete = useCallback((idx) => {\r\n    setTodos(produce(todos , draft => {\r\n      draft.splice(idx,1)\r\n    }));\r\n  },[todos]);\r\n\r\n  const handleToggle = useCallback((idx) => {\r\n    setTodos(produce(todos , draft => {\r\n      draft[idx].checked = !draft[idx].checked;\r\n    }))},[todos]);\r\n\r\n  return (\r\n    <div>\r\n      <TodoTemplate>\r\n        <TodoInsert onInsert={handleInsert}/>\r\n        <TodoList todos={todos} onDelete={handleDelete} onToggle={handleToggle}/>\r\n      </TodoTemplate>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}